<?xml version="1.0"?>
<!-- 
Copyright 2014-2015 EUBrazilCC (EU‐Brazil Cloud Connect)

Licensed under the EUPL, Version 1.1 or - as soon they will be approved by 
the European Commission - subsequent versions of the EUPL (the "Licence");
You may not use this work except in compliance with the Licence.
You may obtain a copy of the Licence at:

  http://ec.europa.eu/idabc/eupl

Unless required by applicable law or agreed to in writing, software 
distributed under the Licence is distributed on an "AS IS" basis,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the Licence for the specific language governing permissions and 
limitations under the Licence.

This product combines work with different licenses. See the "NOTICE" text
file for details on the various modules and licenses.
The "NOTICE" text file is part of the distribution. Any derivative works
that you distribute must include a readable copy of the "NOTICE" text file.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	
	<parent>
		<groupId>eu.eubrazilcc.lvl</groupId>
		<artifactId>lvl-project</artifactId>
		<version>0.3.0</version>
		<relativePath>..</relativePath>
	</parent>
	
	<artifactId>lvl-storage2</artifactId>
	<name>lvl-storage2</name>
	<description>LVL storage connector</description>
	<url>http://eubrazilcloudconnect.eu/</url>
	
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.glassfish.jersey</groupId>
				<artifactId>jersey-bom</artifactId>
				<version>${jersey.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
	
	<dependencies>
		<!-- LVL modules -->
		<dependency>
			<groupId>eu.eubrazilcc.lvl</groupId>
			<artifactId>lvl-core</artifactId>
		</dependency>
		<dependency>
			<groupId>eu.eubrazilcc.lvl</groupId>
			<artifactId>lvl-test</artifactId>
			<scope>test</scope>
		</dependency>
		
		<!-- MongoDB Java driver -->
		<dependency>
			<groupId>org.mongodb</groupId>
			<artifactId>mongodb-driver-async</artifactId>
			<version>3.0.2</version>
			<scope>provided</scope>
		</dependency>
		
		<!-- Implementation of the W3C PROV standard -->
		<dependency> <!-- Provides serialization to JSON -->
			<groupId>org.openprovenance.prov</groupId>
			<artifactId>prov-interop</artifactId>
			<exclusions>
				<exclusion>
					<groupId>log4j</groupId>
					<artifactId>log4j</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		
		<!-- The ANTLR 4 Runtime -->
		<dependency>
			<groupId>org.antlr</groupId>
			<artifactId>antlr4-runtime</artifactId>
		</dependency>
		
		<!-- Apache Commons -->
		<dependency>
			<groupId>commons-beanutils</groupId>
			<artifactId>commons-beanutils</artifactId>
		</dependency>
		
		<!-- Apache Avro -->
		<dependency> <!-- Depends on Jackson 1.9.x, while Jersey uses 2.5.x -->
			<groupId>org.apache.avro</groupId>
			<artifactId>avro</artifactId>
		</dependency>
		
		<!-- Apache ActiveMQ: (optional) embedded broker -->		
		<dependency>
			<groupId>org.apache.activemq</groupId>
			<artifactId>activemq-broker</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.activemq</groupId>
			<artifactId>activemq-runtime-config</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.activemq</groupId>
			<artifactId>activemq-pool</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.activemq</groupId>
			<artifactId>activemq-kahadb-store</artifactId>
		</dependency>
		
		<!-- Apache Shiro -->
		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-core</artifactId>
		</dependency>
		
		<!-- Apache Oltu -->
		<dependency>
			<groupId>org.apache.oltu.oauth2</groupId>
			<artifactId>org.apache.oltu.oauth2.resourceserver</artifactId>
			<scope>provided</scope>
		</dependency>
		
		<!-- JAX-RS API: no specific implementation of JAX-RS is required -->
		<dependency>
			<groupId>javax.ws.rs</groupId>
			<artifactId>javax.ws.rs-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Java Servlet API 3.0 -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<scope>provided</scope>
		</dependency>
		
		<!-- Jersey core common packages -->
		<dependency>
			<groupId>org.glassfish.jersey.core</groupId>
			<artifactId>jersey-common</artifactId>
			<scope>test</scope>
		</dependency>
		
		<!-- Transitively includes Jackson JSON processor from Jersey. Jackson must be 
			provided in production (e.g. with Jersey) -->
		<dependency>
			<groupId>org.glassfish.jersey.media</groupId>
			<artifactId>jersey-media-json-jackson</artifactId>
			<scope>provided</scope>
		</dependency>	
		
		<!-- Jersey declarative hyperlinking -->
		<dependency>
    		<groupId>org.glassfish.jersey.ext</groupId>
    		<artifactId>jersey-declarative-linking</artifactId>
    		<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.el</groupId>
			<artifactId>javax.el-api</artifactId>
			<version>${javax.el.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.glassfish.web</groupId>
			<artifactId>javax.el</artifactId>
			<version>${javax.el.impl.version}</version>
			<scope>provided</scope>
		</dependency>
		
		<!-- Logback and SLF4J logging framework -->
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jul-to-slf4j</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>log4j-over-slf4j</artifactId>
			<scope>provided</scope>
		</dependency>
	</dependencies>
	
	<profiles>
		<!-- Parse Avro schema files .avsc and transforms them into Java source files -->
		<profile>
			<id>generate</id>
			<build>
				<pluginManagement>
					<plugins>
						<!-- Handle Maven plugin lifecycle in Eclipse -->						
						<plugin>
							<groupId>org.eclipse.m2e</groupId>
							<artifactId>lifecycle-mapping</artifactId>
							<version>${m2e.lifecycle-mapping.version}</version>
							<configuration>
								<lifecycleMappingMetadata>
									<pluginExecutions>
										<pluginExecution> <!-- Don't generate Avro binding classes -->
											<pluginExecutionFilter>
												<groupId>org.apache.avro</groupId>
												<artifactId>avro-maven-plugin</artifactId>
												<versionRange>[${avro.version},)</versionRange>
												<goals>
													<goal>schema</goal>
													<goal>protocol</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<ignore />
											</action>
										</pluginExecution>
										<pluginExecution> <!-- ANTLR 4 Java source files -->
											<pluginExecutionFilter>
												<groupId>org.antlr</groupId>
												<artifactId>antlr4-maven-plugin</artifactId>
												<versionRange>[${antlr4.version},)</versionRange>
												<goals>
													<goal>antlr4</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<ignore />
											</action>
										</pluginExecution>
									</pluginExecutions>
								</lifecycleMappingMetadata>
							</configuration>
						</plugin>
					</plugins>
				</pluginManagement>
				
				<plugins>
					<!-- Parse Avro schema files .avsc and transforms them into Java source files -->
					<plugin>
						<groupId>org.apache.avro</groupId>
						<artifactId>avro-maven-plugin</artifactId>
						<version>${avro.version}</version>
						<executions>
							<execution>
								<phase>generate-sources</phase>
								<goals>
									<goal>schema</goal>
								</goals>
								<configuration>
									<!-- <outputDirectory>${project.basedir}/src/main/java/</outputDirectory> -->
									<fieldVisibility>PRIVATE</fieldVisibility>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!-- Parse ANTLR 4 grammar files *.g4 and transforms them into Java source files -->
					<plugin>
						<groupId>org.antlr</groupId>
						<artifactId>antlr4-maven-plugin</artifactId>
						<version>${antlr4.version}</version>
						<executions>
							<execution>
								<id>antlr</id>
								<goals>
									<goal>antlr4</goal>
								</goals>
								<configuration>
									<encoding>UTF-8</encoding>
									<outputDirectory>${project.basedir}/src/main/java/</outputDirectory>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		
		<!-- Build -->
		<profile>
			<id>build</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
		</profile>
	</profiles>
	
	<build>
		<plugins>
			<!-- Build -->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven-compiler-plugin.version}</version>
				<inherited>true</inherited>
				<configuration>
					<source>${maven.compiler.source}</source>
					<target>${maven.compiler.target}</target>
				</configuration>
			</plugin>
			<!-- JUnit tests -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${maven-surefire-plugin.version}</version>
				<configuration>
					<argLine>-Xmx2048M -Xss1024k -XX:+UseConcMarkSweepGC</argLine>
					<!-- Configure JUnit tests to go through the JUnit test suite -->
					<includes>
						<include>**/AllJUnitTests.java</include>
					</includes>
				</configuration>
			</plugin>
			<!-- Integration tests -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<configuration>
					<argLine>-Xmx2048M -Xss1024k -XX:+UseConcMarkSweepGC</argLine>
					<!-- Configure integration tests to go through the JUnit test suite -->
					<includes>
						<include>**/AllIntegrationTests.java</include>
					</includes>
				</configuration>
			</plugin>			
			<plugin>
				<groupId>com.github.joelittlejohn.embedmongo</groupId>
				<artifactId>embedmongo-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>start</id>
						<goals>
							<goal>start</goal>
						</goals>
						<configuration>
							<port>27017</port>
							<version>${embedmongo-maven-plugin.mongodb.version}</version>
							<logging>file</logging>
							<logFile>${project.build.directory}/myfile.log</logFile>
							<bindIp>localhost</bindIp>
							<downloadPath>${embedmongo-maven-plugin.download.path}</downloadPath>
						</configuration>
					</execution>
					<execution>
						<id>stop</id>
						<goals>
							<goal>stop</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	
</project>